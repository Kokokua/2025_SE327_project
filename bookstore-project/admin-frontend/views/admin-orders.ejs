<!DOCTYPE html>
<html>

<head>
    <title>Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #2e2e2e;
            color: #f1f1f1;
            font-family: Arial, sans-serif;
        }

        h1 {
            color: #ffc107;
        }

        .order-table {
            width: 100%;
            margin-top: 10px;
            background-color: #2e2e2e;
            color: #f1f1f1;
            border-collapse: separate;
            border-spacing: 4px;
        }

        .order-table thead {
            background-color: #444;
            color: #ffc107;
        }

        .order-table th,
        .order-table td {
            padding: 8px 12px;
            text-align: center;
            border-bottom: 1px solid #555;
            background-color: #222;
            border-radius: 6px;
        }

        .order-table tbody tr:hover {
            background-color: #555;
        }

        .order-table tbody tr {
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .order-table tbody tr:hover {
            text-decoration: underline;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
    </style>
</head>

<body>
    <%- include('partials/navbar') %>

        <div class="container mt-4" style="padding-top: 56px;">
            <div class="d-flex align-items-center">
                <h1>Orders</h1>
            </div>
            <div class="input-group mb-3">
                <input type="text" id="search-input" class="form-control" placeholder="Search by ID or username...">
            </div>
            <div id="orders-container" class="mt-3"></div>
        </div>

        <script>
            let allOrders = [];

            // Fetch orders
            fetch('/api/orders')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        allOrders = data.data;
                        renderOrders(allOrders);
                    }
                })
                .catch(error => console.error('Error fetching orders:', error));

            // Render orders table
            function renderOrders(orders) {
                const container = document.getElementById('orders-container');
                container.innerHTML = '';

                const table = document.createElement('table');
                table.classList.add('order-table');

                // Table header
                const thead = document.createElement('thead');
                thead.innerHTML = `
                <tr>
                  <th>Order ID</th>
                  <th>User</th>
                  <th>Total</th>
                  <th>Items</th>
                  <th>Date</th>
                </tr>
              `;
                table.appendChild(thead);

                // Table body
                const tbody = document.createElement('tbody');
                orders.forEach(order => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                  <td>${order.id}</td>
                  <td>${order.username} (ID: ${order.user_id})</td>
                  <td>$${(Number(order.total_price) || 0).toFixed(2)}</td>
                  <td>${order.items.map(item => `#${item.book_id} (x${item.quantity})`).join(', ')}</td>
                  <td>${new Date(order.created_at).toLocaleDateString()}</td>
                `;
                    tr.addEventListener('click', () => showOrderDetails(order));
                    tbody.appendChild(tr);
                });

                table.appendChild(tbody);
                container.appendChild(table);
            }

            // Search functionality
            document.getElementById('search-input').addEventListener('input', function (e) {
                const term = e.target.value.toLowerCase();
                const filtered = allOrders.filter(order =>
                    order.id.toString().includes(term) ||
                    order.username.toLowerCase().includes(term) ||
                    order.items.some(item => item.book_id.toString().includes(term))
                );
                renderOrders(filtered);
            });

            // Detail Modal
            const modalTemplate = `
                <div class="modal fade" id="orderDetailsModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content bg-dark text-light">
                    <div class="modal-header border-secondary">
                        <h5 class="modal-title">Order Details</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="orderCarousel" class="carousel slide mb-4" data-bs-ride="carousel">
                        <div class="carousel-inner"></div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#orderCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon"></span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#orderCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon"></span>
                        </button>
                        </div>
                        
                        <div class="order-info">
                        <p><strong>Order ID:</strong> <span id="orderId"></span></p>
                        <p><strong>User:</strong> <span id="orderUser"></span></p>
                        <p><strong>Total:</strong> <span id="orderTotal"></span></p>
                        <p><strong>Date:</strong> <span id="orderDate"></span></p>
                        <h5 class="mt-3">Items:</h5>
                        <ul id="orderItemsList" class="list-group"></ul>
                        </div>
                    </div>
                    <div class="modal-footer border-secondary">
                        <button type="button" class="btn btn-danger" onclick="deleteOrder()">Delete Order</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                    </div>
                </div>
                </div>`;

            document.body.insertAdjacentHTML('beforeend', modalTemplate);

            function showOrderDetails(order) {
                const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
                const carouselInner = document.querySelector('#orderCarousel .carousel-inner');
                const itemsList = document.getElementById('orderItemsList');

                carouselInner.innerHTML = '';
                itemsList.innerHTML = '';

                // Populate carousel
                order.items.forEach((item, index) => {
                    const carouselItem = document.createElement('div');
                    carouselItem.className = `carousel-item ${index === 0 ? 'active' : ''}`;

                    const imageUrl = item.image ? `/images/${item.image}` : '/images/placeholder.jpg';
                    carouselItem.innerHTML = `
                        <img src="${imageUrl}" class="d-block w-100" alt="${item.title}" style="height: 300px; object-fit: contain;">
                        <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-75">
                            <h5>${item.title}</h5>
                            <p>Quantity: ${item.quantity} | Price: $${item.price.toFixed(2)}</p>
                        </div>
                    `;
                    carouselInner.appendChild(carouselItem);
                });

                // Populate order info
                document.getElementById('orderId').textContent = order.id;
                document.getElementById('orderUser').textContent = `${order.username} (ID: ${order.user_id})`;
                document.getElementById('orderTotal').textContent = `$${Number(order.total_price).toFixed(2)}`;
                document.getElementById('orderDate').textContent = new Date(order.created_at).toLocaleDateString();

                // Populate items list
                order.items.forEach(item => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item bg-secondary text-light';
                    li.innerHTML = `
                        <div class="d-flex justify-content-between">
                            <span>${item.title} (ID: ${item.book_id})</span>
                            <span>${item.quantity}x $${item.price.toFixed(2)}</span>
                        </div>
                    `;
                    itemsList.appendChild(li);
                });

                modal.show();
            }

            async function deleteOrder() {
                const orderId = document.getElementById('orderId').textContent;
                try {
                    const response = await fetch(`/api/orders/${orderId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        alert('order deleted successfully');
                        setTimeout(() => {
                            location.reload();
                        }, 500);
                    } else {
                        alert('Failed to delete order');
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    alert('Error deleting order');
                }
            }
        </script>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>