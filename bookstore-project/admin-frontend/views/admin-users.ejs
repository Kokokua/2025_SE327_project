<!DOCTYPE html>
<html>

<head>
    <title>Users</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #2e2e2e;
            color: #f1f1f1;
            font-family: Arial, sans-serif;
        }

        h1 {
            color: #ffc107;
        }

        .user-table {
            width: 100%;
            margin-top: 10px;
            background-color: #2e2e2e;
            color: #f1f1f1;
            border-collapse: separate;
            border-spacing: 4px;
        }

        .user-table thead {
            background-color: #444;
            color: #ffc107;
        }

        .user-table th,
        .user-table td {
            padding: 8px 12px;
            text-align: center;
            border-bottom: 1px solid #555;
            background-color: #222;
            border-radius: 6px;
        }

        .user-table tbody tr:hover {
            background-color: #555;
        }

        .user-table tbody tr {
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .user-table tbody tr:hover {
            text-decoration: underline;
        }

        .user-table td:nth-child(1) {
            width: 5%;
        }

        .user-table td:nth-child(2) {
            width: 15%;
        }

        .user-table td:nth-child(3) {
            width: 25%;
        }

        .user-table td:nth-child(4),
        .user-table td:nth-child(5) {
            width: 15%;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .popup-menu {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #444;
            border: 1px solid #666;
            border-radius: 8px;
            padding: 20px;
            color: white;
            min-width: 300px;
            z-index: 1000;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }


        #user-popup {
            display: none;
            flex-direction: row;
            align-items: center;
            background-color: #444;
            border: 1px solid #666;
            border-radius: 8px;
            padding: 20px;
            color: white;
            max-width: 50vw;
            max-height: 90vh;
            margin-top: 30px;
            width: 70%;
            height: auto;
            z-index: 1000;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            justify-content: center;
            gap: 20px;
            overflow: hidden;
        }

        .details-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            overflow: hidden;
        }

        .details-container .form-control {
            margin-right: 12px;
        }

        .details-container div:last-child {
            width: 100%;
            margin-top: 1rem;
        }

        #apply-editor-btn,
        #delete-editor-btn {
            flex: 1;
            min-width: 0;
        }

        #reset-filter-btn,
        #delete-editor-btn {
            background-color: transparent;
            border: 2px solid red;
            color: red;
            transition: all 0.3s ease;
        }

        #delete-editor-btn:hover,
        #reset-filter-btn:hover {
            background-color: red;
            color: white;
        }

        @media (max-width: 768px) {
            #user-popup {
                flex-direction: column;
                max-width: 90vw;
                max-height: 90vh;
                overflow: auto;
            }

            .details-container {
                overflow: auto;
            }
        }
    </style>
</head>

<body>
    <%- include('partials/navbar') %>

        <div class="container mt-4" style="padding-top: 56px;">
            <div class="d-flex align-items-center">
                <h1>Users</h1>
                <button class="btn btn-outline-secondary btn-sm ms-2" style="color: lightgrey;" id="user-creator-btn">
                    Add User
                </button>
            </div>
            <div class="input-group mb-3">
                <%- include('partials/searchbar_with_filter', { placeholder: 'Search by ID or username...' }) %>
            </div>
            <div id="users-container" class="mt-3"></div>
            <div id="filter-popup" class="popup-menu" style="display: none;">
                <%- include('partials/input-id', { suffix: 'filter' }) %>
                    <%- include('partials/input-text', { subject: 'username' , suffix: 'filter' , label: 'Username' ,
                        placeholder: 'Username' }) %>
                        <%- include('partials/input-text', { subject: 'email' , suffix: 'filter' , label: 'Email' ,
                            placeholder: 'Email' }) %>
                            <%- include('partials/input-date_range', { subject: 'dob' , suffix: 'filter' ,
                                label: 'Date of Birth' , startPlaceholder: 'Start' , endPlaceholder: 'End' }) %>
                                <%- include('partials/input-date_range', { subject: 'created_at' , suffix: 'filter' ,
                                    label: 'Created At' , startPlaceholder: 'Start' , endPlaceholder: 'End' }) %>
                                    <button id="apply-filter-btn" class="btn btn-primary mt-3">Search</button>
                                    <button id="reset-filter-btn" class="btn btn-primary mt-3">Reset</button>
            </div>
            <div id="user-popup" class="popup-menu" style="display: none;">
                <div class="details-container">
                    <%- include('partials/input-id', { suffix: 'editor' }) %>
                        <%- include('partials/input-text', { subject: 'username' , suffix: 'editor' , label: 'Username'
                            , placeholder: 'Username' }) %>
                            <%- include('partials/input-text', { subject: 'email' , suffix: 'editor' , label: 'Email' ,
                                placeholder: 'Email' }) %>
                                <%- include('partials/input-text', { subject: 'password' , suffix: 'editor' ,
                                    label: 'Password' , placeholder: 'Password' }) %>
                                    <%- include('partials/input-date', { subject: 'dob' , suffix: 'editor' ,
                                        label: 'Date of Birth' , placeholder: 'Birthday' }) %>
                                        <%- include('partials/input-date', { subject: 'created_at' , suffix: 'editor' ,
                                            label: 'Created At' , placeholder: 'Date' }) %>
                                            <div class="d-flex gap-2">
                                                <button id="apply-editor-btn"
                                                    class="btn btn-primary w-50">Apply</button>
                                                <button id="delete-editor-btn"
                                                    class="btn btn-primary w-50">Delete</button>
                                            </div>
                </div>
            </div>
            <div id="creator-popup" class="popup-menu" style="display: none;">
                <div class="details-container">
                    <%- include('partials/input-text', { subject: 'username' , suffix: 'creator' , label: 'Username' ,
                        placeholder: 'Username' }) %>
                        <%- include('partials/input-text', { subject: 'email' , suffix: 'creator' , label: 'Email' ,
                            placeholder: 'Email' }) %>
                            <%- include('partials/input-text', { subject: 'password' , suffix: 'creator' ,
                                label: 'Password' , placeholder: 'Password' , type: 'password' }) %>
                                <%- include('partials/input-date', { subject: 'dob' , suffix: 'creator' ,
                                    label: 'Date of Birth' , placeholder: 'Birthday' }) %>
                                    <button id="create-user-btn" class="btn btn-primary mt-3">Add</button>
                </div>
            </div>
        </div>
        <%- include('partials/popup-backdrop') %>

            <script>
                let allUsers = [];

                fetch('/api/users')
                    .then(response => response.json())
                    .then(users => {
                        allUsers = users;
                        renderUsers(allUsers);
                    })
                    .catch(error => {
                        console.error('Error fetching users:', error);
                    });

                function renderUsers(users) {
                    const usersContainer = document.getElementById('users-container');
                    usersContainer.innerHTML = '';

                    const table = document.createElement('table');
                    table.classList.add('user-table');

                    const thead = document.createElement('thead');
                    thead.innerHTML = `
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Password</th>
                            <th>Date of Birth</th>
                            <th>Created At</th>
                        </tr>
                    `;
                    table.appendChild(thead);

                    const tbody = document.createElement('tbody');
                    users.forEach(user => {
                        const formattedCreatedAt = new Date(user.created_at).toLocaleString();
                        const maskedPassword = '••••••••';

                        const row = document.createElement('tr');
                        row.addEventListener('click', () => showUserPopup(user));
                        row.innerHTML = `
                            <td>${user.id}</td>
                            <td>${user.username}</td>
                            <td>${user.email}</td>
                            <td><span class="password" data-password="${user.password}">${maskedPassword}</span></td>
                            <td>${new Date(user.date_of_birth).toISOString().split('T')[0]}</td>
                            <td>${formattedCreatedAt}</td>
                        `;
                        tbody.appendChild(row);

                        let timeout;
                        row.addEventListener('mouseenter', () => {
                            timeout = setTimeout(() => {
                                row.querySelector('.password').textContent = user.password; // Show password after 0.5s
                            }, 500);
                        });

                        row.addEventListener('mouseleave', () => {
                            clearTimeout(timeout);
                            row.querySelector('.password').textContent = maskedPassword; // Hide password when not hovering
                        });
                    });

                    table.appendChild(tbody);

                    const tableWrapper = document.createElement('div');
                    tableWrapper.classList.add('table-responsive');
                    tableWrapper.appendChild(table);
                    usersContainer.appendChild(tableWrapper);
                }

                //EDITOR
                function showUserPopup(user) {
                    const popup = document.getElementById('user-popup');
                    const backdrop = document.getElementById('popup-backdrop');

                    popup.style.display = 'flex';
                    backdrop.style.display = 'block';

                    // Format dates for input fields
                    const dobDate = new Date(user.date_of_birth);
                    const createdAtDate = new Date(user.created_at);

                    // Populate form fields
                    document.getElementById('input-id-editor').value = user.id;
                    document.getElementById('input-username-editor').value = user.username;
                    document.getElementById('input-email-editor').value = user.email;
                    document.getElementById('input-dob-editor').value = dobDate.toISOString().split('T')[0];
                    document.getElementById('input-created_at-editor').value = createdAtDate.toISOString().split('T')[0];

                    // Password field handling
                    const passwordInput = document.getElementById('input-password-editor');
                    let passwordTimeout;
                    const maskedPassword = '••••••••';

                    passwordInput.value = maskedPassword;
                    passwordInput.setAttribute('data-password', user.password);

                    // Hover handlers
                    passwordInput.addEventListener('mouseenter', () => {
                        passwordTimeout = setTimeout(() => {
                            if (passwordInput.value === maskedPassword) {
                                passwordInput.value = passwordInput.dataset.password;
                            }
                        }, 500);
                    });

                    passwordInput.addEventListener('mouseleave', () => {
                        clearTimeout(passwordTimeout);
                        if (passwordInput.value === passwordInput.dataset.password) {
                            passwordInput.value = maskedPassword;
                        }
                    });

                    passwordInput.addEventListener('focus', () => {
                        clearTimeout(passwordTimeout);
                        if (passwordInput.value === maskedPassword) {
                            passwordInput.value = passwordInput.dataset.password;
                        }
                    });

                    passwordInput.addEventListener('blur', () => {
                        if (passwordInput.value === passwordInput.dataset.password) {
                            passwordInput.value = maskedPassword;
                        }
                    });

                    const createdAtInput = document.getElementById('input-created_at-editor');
                    const idInput = document.getElementById('input-id-editor');
                    createdAtInput.disabled = true;
                    idInput.disabled = true;
                    createdAtInput.style.cursor = 'not-allowed';
                    idInput.style.cursor = 'not-allowed';
                }

                function updateUser(userId) {
                    const passwordInput = document.getElementById('input-password-editor');
                    const updatedData = {
                        username: document.getElementById('input-username-editor').value,
                        email: document.getElementById('input-email-editor').value,
                        date_of_birth: document.getElementById('input-dob-editor').value,
                        // Only update password if it's been changed (not masked)
                        password: passwordInput.value !== '••••••••' ? passwordInput.value : undefined
                    };

                    const errors = [];

                    if (!updatedData.username) errors.push('Username is required');
                    if (!updatedData.email) errors.push('Email is required');
                    if (!updatedData.date_of_birth) errors.push('Birth date is required');

                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (updatedData.email && !emailRegex.test(updatedData.email)) {
                        errors.push('Invalid email format');
                    }

                    const today = new Date();
                    const birthDate = new Date(updatedData.date_of_birth);
                    if (birthDate > today) {
                        errors.push('Birth date cannot be in the future');
                    }

                    if (errors.length > 0) {
                        alert('Validation errors:\n' + errors.join('\n'));
                        return;
                    }


                    fetch(`/api/users/${userId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updatedData)
                    })
                        .then(response => {
                            if (!response.ok) throw new Error('Update failed');
                            return response.json();
                        })
                        .then(updatedUser => {
                            alert('User updated successfully!');
                            setTimeout(() => {
                                location.reload();
                            }, 500);
                        })
                        .catch(error => {
                            console.error('Error updating user:', error);
                            alert('Failed to update user: ' + error.message);
                        });
                }

                function deleteUser(userId) {
                    if (confirm('Are you sure you want to permanently delete this user?')) {
                        fetch(`/api/users/${userId}`, {
                            method: 'DELETE'
                        })
                            .then(response => {
                                if (!response.ok) throw new Error('Delete failed');
                                return response.json();
                            })
                            .then(data => {
                                alert('User deleted successfully!');
                                setTimeout(() => {
                                    location.reload();
                                }, 500);
                            })
                            .catch(error => {
                                console.error('Error deleting user:', error);
                                alert('Failed to delete user: ' + error.message);
                            });
                    }
                }

                document.getElementById('apply-editor-btn').addEventListener('click', () => {
                    const userId = document.getElementById('input-id-editor').value;
                    updateUser(userId);
                });

                document.getElementById('delete-editor-btn').addEventListener('click', () => {
                    const userId = document.getElementById('input-id-editor').value;
                    deleteUser(userId);
                });

                // ADD USER
                document.getElementById('user-creator-btn').addEventListener('click', () => {
                    const creatorPopup = document.getElementById('creator-popup');

                    document.getElementById('input-username-creator').value = '';
                    document.getElementById('input-email-creator').value = '';
                    document.getElementById('input-password-creator').value = '';
                    document.getElementById('input-dob-creator').value = '';

                    creatorPopup.style.display = 'flex';
                    document.getElementById('popup-backdrop').style.display = 'block';
                });

                document.getElementById('create-user-btn').addEventListener('click', async () => {
                    const userData = {
                        username: document.getElementById('input-username-creator').value,
                        email: document.getElementById('input-email-creator').value,
                        password: document.getElementById('input-password-creator').value,
                        date_of_birth: document.getElementById('input-dob-creator').value
                    };

                    const errors = [];

                    if (!userData.username) errors.push('Username is required');
                    if (!userData.email) errors.push('Email is required');
                    if (!userData.password) errors.push('Password is required');
                    if (!userData.date_of_birth) errors.push('Birth date is required');

                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (userData.email && !emailRegex.test(userData.email)) {
                        errors.push('Invalid email format');
                    }

                    const today = new Date();
                    const birthDate = new Date(userData.date_of_birth);
                    if (birthDate > today) {
                        errors.push('Birth date cannot be in the future');
                    }

                    if (errors.length > 0) {
                        alert('Validation errors:\n' + errors.join('\n'));
                        return;
                    }

                    // Declare response variable in a broader scope
                    let response;

                    try {
                        const response = await fetch('/api/users', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(userData)
                        });

                        const responseText = await response.text();

                        if (!response.ok) {
                            let errorData;
                            try {
                                errorData = JSON.parse(responseText);
                            } catch {
                                errorData = { error: responseText };
                            }
                            throw new Error(errorData.error || errorData.errors?.join('\n') || 'Failed to create user');
                        }

                        const result = JSON.parse(responseText);
                        document.getElementById('creator-popup').style.display = 'none';
                        document.getElementById('popup-backdrop').style.display = 'none';
                        alert('User created successfully!');
                        setTimeout(() => location.reload(), 500);

                    } catch (error) {
                        let errorMessage = error.message;

                        // Check if response exists and try to get further details
                        if (response) {
                            try {
                                const errorData = await response.json();
                                errorMessage = errorData.error || errorData.errors?.join('\n') || errorMessage;
                            } catch {
                                // If response isn't JSON, optionally handle non-JSON responses
                                try {
                                    const text = await response.text();
                                    errorMessage = text.startsWith('<') ? 'Server error occurred' : text;
                                } catch { }
                            }
                        }

                        alert(`Error: ${errorMessage}`);
                        console.error('Creation Error:', error);
                    }
                });


                // CLOSE POPUP
                document.getElementById('popup-backdrop').addEventListener('mousedown', () => {
                    const filterPopup = document.getElementById('filter-popup');
                    const userPopup = document.getElementById('user-popup');
                    const creatorPopup = document.getElementById('creator-popup');


                    filterPopup.style.display = 'none';
                    userPopup.style.display = 'none';
                    creatorPopup.style.display = 'none';

                    document.getElementById('popup-backdrop').style.display = 'none';
                });

                // SEARCH FUNCTIONS
                document.getElementById('search-input').addEventListener('input', function (e) {
                    const searchTerm = e.target.value.trim().toLowerCase();
                    const filteredUsers = allUsers.filter(user =>
                        user.id.toString().includes(searchTerm) ||
                        user.username.toLowerCase().includes(searchTerm)
                    );
                    renderUsers(filteredUsers);
                });

                document.getElementById('apply-filter-btn').addEventListener('click', function () {
                    const idFilter = document.getElementById('input-id-filter').value.trim();
                    const usernameFilter = document.getElementById('input-username-filter').value.trim().toLowerCase();
                    const emailFilter = document.getElementById('input-email-filter').value.trim().toLowerCase();
                    const startDob = document.getElementById('start-dob-filter').value;
                    const endDob = document.getElementById('end-dob-filter').value;
                    const startCreated = document.getElementById('start-created_at-filter').value;
                    const endCreated = document.getElementById('end-created_at-filter').value;

                    const filteredUsers = allUsers.filter(user => {
                        // ID Filter
                        if (idFilter) {
                            const filterId = parseInt(idFilter, 10);
                            if (isNaN(filterId) || user.id !== filterId) return false;
                        }

                        // Username Filter
                        if (usernameFilter && !user.username.toLowerCase().includes(usernameFilter)) return false;

                        // Email Filter
                        if (emailFilter && !user.email.toLowerCase().includes(emailFilter)) return false;

                        // Date of Birth Filter
                        const userDob = new Date(user.date_of_birth);
                        if (startDob) {
                            const startDate = new Date(startDob);
                            startDate.setHours(0, 0, 0, 0);
                            if (userDob < startDate) return false;
                        }
                        if (endDob) {
                            const endDate = new Date(endDob);
                            endDate.setHours(23, 59, 59, 999);
                            if (userDob > endDate) return false;
                        }

                        // Created At Filter
                        const userCreated = new Date(user.created_at);
                        if (startCreated) {
                            const startDate = new Date(startCreated);
                            startDate.setHours(0, 0, 0, 0);
                            if (userCreated < startDate) return false;
                        }
                        if (endCreated) {
                            const endDate = new Date(endCreated);
                            endDate.setHours(23, 59, 59, 999);
                            if (userCreated > endDate) return false;
                        }

                        return true;
                    });
                    const popup = document.getElementById('filter-popup');
                    popup.style.display = 'none';
                    const backdrop = document.getElementById('popup-backdrop');
                    backdrop.style.display = 'none';
                    renderUsers(filteredUsers);
                });

                document.getElementById('reset-filter-btn').addEventListener('click', function () {
                    document.querySelectorAll('#filter-popup input').forEach(input => input.value = '');
                });

                document.getElementById('filter-button').addEventListener('click', () => {
                    const popup = document.getElementById('filter-popup');
                    const backdrop = document.getElementById('popup-backdrop');

                    const isVisible = popup.style.display === 'block';

                    popup.style.display = isVisible ? 'none' : 'block';
                    backdrop.style.display = isVisible ? 'none' : 'block';
                });
            </script>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>