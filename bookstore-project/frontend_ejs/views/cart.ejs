<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Cart - B Store</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Include the same styles from previous cart example */
        .cart-item {
            transition: all 0.3s ease;
        }

        .quantity-input {
            width: 60px;
            text-align: center;
        }

        .remove-btn:hover {
            color: #dc3545 !important;
        }

        .total-box {
            background-color: #fff9db;
            border: 2px solid #ffe066;
        }
    </style>
</head>

<body>
    <%- include('partials/header') %>

        <div class="container py-5">
            <h1 class="mb-4">Your Shopping Cart</h1>
            <div id="cart-content">
                <!-- Cart content will be loaded here by JavaScript -->
                <div class="text-center my-5">
                    <div class="spinner-border text-warning" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>

        <%- include('partials/footer') %>

            <script>
                async function loadCart() {
                    try {
                        const cart = JSON.parse(localStorage.getItem('shopping_cart')) || [];
                        const booksResponse = await fetch('/api/books');
                        const allBooks = await booksResponse.json();

                        const cartItems = cart.map(item => {
                            // Convert stored bookId to number
                            const bookId = Number(item.bookId);
                            const book = allBooks.find(b => b.id === bookId);

                            return book ? {
                                ...item,
                                bookId: bookId, // Store as number
                                book: {
                                    ...book,
                                    price: book.discounted_price || book.price
                                }
                            } : null;
                        }).filter(Boolean);

                        renderCart(cartItems);
                    } catch (error) {
                        console.error('Error loading cart:', error);
                        document.getElementById('cart-content').innerHTML = `
                <div class="alert alert-danger">
                    Error loading cart. Please try refreshing the page.
                </div>
            `;
                    }
                }


                function renderCart(items) {
                    const container = document.getElementById('cart-content');
                    if (items.length === 0) {
                        container.innerHTML = `
                <div class="alert alert-info">
                    Your cart is empty. <a href="/">Continue shopping</a>
                </div>
            `;
                        return;
                    }

                    const total = items.reduce((sum, item) =>
                        sum + (item.book.price * item.quantity), 0);

                    container.innerHTML = `
            <div class="row">
                <div class="col-lg-8">
                    ${items.map(item => `
                        <div class="card mb-3 cart-item" data-book-id="${item.bookId}">
                            <div class="row g-0">
                                <div class="col-md-3">
                                    <img src="${item.book.image || 'placeholder.jpg'}" 
                                         class="img-fluid rounded-start" 
                                         alt="${item.book.title}">
                                </div>
                                <div class="col-md-7">
                                    <div class="card-body">
                                        <h5 class="card-title">${item.book.title}</h5>
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="input-group" style="width: 140px">
                                                <button class="btn btn-outline-secondary quantity-btn" 
                                                        data-action="decrement" 
                                                        data-book-id="${Number(item.bookId)}">âˆ’</button>
                                                <input type="text" 
                                                       class="form-control quantity-input" 
                                                       value="${item.quantity}">
                                                <button class="btn btn-outline-secondary quantity-btn" 
                                                        data-action="increment" 
                                                        data-book-id="${item.bookId}">+</button>
                                            </div>
                                            <div class="price">
                                                $${item.book.price.toFixed(2)}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2 d-flex align-items-center justify-content-center">
                                    <button class="btn btn-link remove-btn text-danger" 
                                            data-book-id="${item.bookId}">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>

                <div class="col-lg-4">
                    <div class="card total-box">
                        <div class="card-body">
                            <h5 class="card-title">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Subtotal (${items.reduce((sum, item) => sum + item.quantity, 0)} items):</span>
                                <span>$${total.toFixed(2)}</span>
                            </div>
                            <button class="btn btn-primary w-100" onclick="checkout()">Proceed to Checkout</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
                }

                // Event delegation for dynamic elements
                document.addEventListener('click', function (e) {
                    // Handle remove buttons
                    const removeBtn = e.target.closest('.remove-btn');
                    if (removeBtn) {
                        const bookId = removeBtn.dataset.bookId;
                        console.log('Removing item with ID:', bookId); // Debug log
                        removeItem(bookId);
                        return;
                    }

                    // Handle quantity buttons
                    const quantityBtn = e.target.closest('.quantity-btn');
                    if (quantityBtn) {
                        const button = quantityBtn;
                        const bookId = button.dataset.bookId;
                        const action = button.dataset.action;
                        const input = button.parentElement.querySelector('.quantity-input');
                        const currentQuantity = parseInt(input.value) || 0;
                        const newQuantity = action === 'increment' ? currentQuantity + 1 : currentQuantity - 1;

                        console.log('Updating quantity for:', bookId, 'New quantity:', newQuantity); // Debug log
                        updateQuantity(bookId, newQuantity);
                    }
                });

                function updateQuantity(bookId, newQuantity) {
                    const cart = JSON.parse(localStorage.getItem('shopping_cart')) || [];
                    const targetId = Number(bookId);
                    const item = cart.find(item => Number(item.bookId) === targetId);

                    if (!item) return;

                    if (newQuantity <= 0) {
                        cart.splice(cart.indexOf(item), 1);
                    } else {
                        item.quantity = newQuantity;
                    }

                    localStorage.setItem('shopping_cart', JSON.stringify(cart));
                    loadCart(); // Refresh display
                    updateCartCount();
                }

                function removeItem(bookId) {
                    const targetId = Number(bookId);
                    const cart = JSON.parse(localStorage.getItem('shopping_cart')) || [];
                    const newCart = cart.filter(item => Number(item.bookId) !== targetId);
                    localStorage.setItem('shopping_cart', JSON.stringify(newCart));
                    loadCart();
                    updateCartCount();
                }

                function checkout() {
                    alert('Checkout functionality would go here');
                    // Could redirect to a checkout page or show a form
                }

                function updateCartCount() {
                    const cart = JSON.parse(localStorage.getItem('shopping_cart')) || [];
                    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
                    const token = localStorage.getItem('token');

                    document.querySelectorAll('.cart-count').forEach(el => {
                        el.textContent = totalItems || '';
                        el.style.display = totalItems ? 'inline-block' : 'none';

                        // Change background color based on authentication
                        if (token) {
                            el.style.backgroundColor = '#e74c3c'; // Original red color
                        } else {
                            el.style.backgroundColor = '#ffd700'; // Yellow color
                            el.style.color = '#000'; // Ensure text is visible
                        }
                    });
                }

                // Initial load
                async function initializeCart() {
                    await loadCart();
                    updateCartCount();
                }
                initializeCart();
            </script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
            <link rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</body>

</html>